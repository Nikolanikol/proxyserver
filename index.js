const axios = require("axios");
const cors = require("cors");
const express = require("express");
const fs = require("fs");
const path = require("path");
const { send } = require("process");

const app = new express();
const PORT = process.env.PORT | 3000;
const BASEURL = `https://api.mangadex.org`;
app.use(cors());
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
const downloadsDir = path.join(__dirname, "downloads");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ "downloads", –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º
if (!fs.existsSync(downloadsDir)) {
  fs.mkdirSync(downloadsDir, { recursive: true });
  console.log("üìÇ –ü–∞–ø–∫–∞ 'downloads' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.");
}
app.use("/downloads", express.static(downloadsDir));
//check endpoint
app.get("/", (req, res) => {
  res.send("Hello all working");
});
//get mangai tems endpoint
app.get("/manga/catalog", async (req, res) => {
  const { offset, limit, createdAtSince, includedTags, contentRating, title } =
    req.query;

  console.log(
    "createdAtSince",
    createdAtSince,
    "includedTags",
    includedTags,
    "contentRating",
    contentRating
  );
  try {
    const responce = await axios
      .get(BASEURL + "/manga", {
        params: {
          offset,
          limit,
          includedTags: [includedTags],
          createdAtSince,
          contentRating: [contentRating],
          hasAvailableChapters: 1,
          order: {
            relevance: "desc",
          },
          title,
        },
      })
      .then((res) => res.data);
    res.send(responce);
  } catch (error) {
    console.log("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞");
  }
});

///–ø–æ–ª—É—á–∞–µ–º —Ç–∞–π—Ç–ª—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
app.get("/manga/search", async (req, res) => {
  const { title } = req.query;

  console.log(title);

  const responce = await axios.get(BASEURL + "/manga", {
    params: {
      title,
    },
  });
  res.send(responce.data);
});
//–ø–æ–ª—É—á–∞–µ–º filename
app.get("/cover", async (req, res) => {
  try {
    const { id } = req.query;

    const responce = await axios(BASEURL + "/cover" + "/" + id).then(
      (res) => res.data
    );
    res.send(responce);
  } catch (error) {
    console.log(error);
  }
});
//–∑–µ—Ä–∫–∞–ª–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
app.get("/cover/img", async (req, res) => {
  try {
    const { query: imageUrl } = req.query;

    if (!imageUrl) {
      return res.status(400).send("–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
    }

    try {
      const response = await axios({
        url: imageUrl,
        method: "GET",
        responseType: "stream",
      });

      // –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      res.setHeader("Content-Type", response.headers["content-type"]);

      response.data.pipe(res);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error.message);
      res.status(500).send("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
    }
  } catch (error) {}
});
//–ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–Ω–≥–µ —Ç–∞–π—Ç–ª
app.get("/manga/:id", async (req, res) => {
  try {
    const { id } = req.params;
    console.log(id);
    const responce = await axios(BASEURL + "/manga" + "/" + id).then(
      (res) => res.data
    );
    res.send(responce);
  } catch (error) {
    console.log(error);
  }
});

///–ü–û–õ–£–ß–ê–ï–ú –°–ü–ò–°–û–ö –ì–õ–ê–í –ú–ê–ù–ì–ò
app.get("/manga/:id/chapters", async (req, res) => {
  try {
    const { id } = req.params;
    const responce = await axios(BASEURL + "/manga" + "/" + id + "/aggregate", {
      params: {
        translatedLanguage: ["en"],
      },
    });

    res.send(responce.data);
  } catch (error) {
    console.log(error);
  }
});
//–ü–û–õ–£–ê–ß–ê–ï–ú –°–õ–ê–ô–î–´ –î–õ–Ø –ú–ê–ù–ì–ò –ü–û ID
app.get("/manga/chapter/:id", async (req, res) => {
  const { id } = req.params;

  const responce = await axios(BASEURL + "/at-home/server" + "/" + id);
  res.send(responce.data);
});
/////–ó–ê–ì–†–£–î–ê–ï–ú –¢–ï–ì–ò –î–õ–Ø –ü–û–ò–°–ö–ê –ú–ê–ù–ì–ò
app.get("/tags", async (req, res) => {
  const responce = await axios(BASEURL + "/manga/tag");

  res.send(responce.data.data);
});

app.listen(PORT, () => {
  console.log("Server started on " + PORT);
});

///–º–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
// app.get("/download", async (req, res) => {
//   const imageUrl =
//     "https://uploads.mangadex.org/covers/0f19ed5a-e496-4416-8d4d-86d338655156/d6ea2d68-709b-4c17-9e67-2f93fa759071.jpg.256.jpg";
//   //   req.query.url; // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
//   if (!imageUrl) {
//     return res.status(400).send("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
//   }

//   try {
//     const response = await axios({
//       url: imageUrl,
//       method: "GET",
//       responseType: "stream",
//     });

//     const fileName = path.basename(imageUrl);
//     const filePath = path.join(__dirname, "downloads", fileName);

//     const writer = fs.createWriteStream(filePath);
//     response.data.pipe(writer);

//     writer.on("finish", () => {
//       res.send(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${filePath}`);
//     });

//     writer.on("error", (err) => {
//       console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:", err);
//       res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
//     });
//   } catch (error) {
//     console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error.message);
//     res.status(500).send("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
//   }
// });
